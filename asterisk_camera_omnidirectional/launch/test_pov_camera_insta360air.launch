<launch>
  
  <arg name="video_device" default="/dev/v4l/by-id/usb-Arashi_Vision_Insta360_Air-video-index0" />
  <arg name="vendor" default="0x2e1a" />
  <arg name="product" default="0x1000" />
  <arg name="index" default="0" />
  <arg name="image_width" default="3008" />
  <arg name="image_height" default="1504" />
  <!-- <arg name="image_width" default="1472" /> -->
  <!-- <arg name="image_height" default="736" /> -->
  <arg name="pixel_format" default="mjpeg" />
  <arg name="frame_rate" default="30" />
  <arg name="camera_name" default="camera" />
  <arg name="pov_camera_name" default="pov_camera" />
  <arg name="pan" default="0.0" />
  <arg name="tilt" default="0.0" />
  <arg name="roll" default="0.0" />
  
  
  <include file="$(find asterisk_camera_omnidirectional)/launch/usb_cam_hardware_mjpeg.launch">
    <arg name="video_device" value="$(arg video_device)" />
    <arg name="image_width" value="$(arg image_width)" />
    <arg name="image_height" value="$(arg image_height)" />
    <arg name="pixel_format" value="$(arg pixel_format)" />
    <arg name="frame_rate" value="$(arg frame_rate)" />
    <arg name="camera_name" value="$(arg camera_name)" />
  </include>
  
  <!-- <node name="$(arg camera_name)_driver" pkg="usb_cam" type="usb_cam_node">
    <remap from="~image_raw" to="$(arg camera_name)/image"/>
    <param name="video_device" value="$(arg video_device)" />
    <param name="image_width" value="$(arg image_width)" />
    <param name="image_height" value="$(arg image_height)" />
    <param name="pixel_format" value="$(arg pixel_format)" />
    <param name="camera_name" value="$(arg camera_name)"/>
    <param name="camera_frame_id" value="$(arg camera_name)"/>
  </node> -->
  
  <!-- <node name="$(arg camera_name)_driver" pkg="libuvc_camera" type="camera_node">
    <remap from="image_raw" to="$(arg camera_name)/image"/>
    <param name="vendor" value="$(arg vendor)" />
    <param name="product" value="$(arg product)" />
    <param name="index" value="$(arg index)" />
    <param name="width" value="$(arg image_width)" />
    <param name="height" value="$(arg image_height)" />
    <param name="video_mode" value="$(arg pixel_format)" />
    <param name="frame_rate" value="$(arg frame_rate)" />
    <param name="frame_id" value="$(arg camera_name)" />
    <param name="auto_white_balance" value="true" />
  </node> -->
  
  <node name="$(arg camera_name)_splitter" pkg="nodelet" type="nodelet"
        args="standalone image_reprojection_plugins/DualFisheyeSplitter" output="screen">
    <remap from="image" to="$(arg camera_name)/image" />
    <remap from="left/image" to="$(arg camera_name)/front/image" />
    <remap from="right/image" to="$(arg camera_name)/back/image" />
    <rosparam ns="left" subst_value="true">
      frame_id: $(arg camera_name)/front
      camera_name: insta360_front
      camera_info_url: package://asterisk_camera_omnidirectional/camera_info/insta360_front.yaml
    </rosparam>
    <rosparam ns="right" subst_value="true">
      frame_id: $(arg camera_name)/back
      camera_name: insta360_back
      camera_info_url: package://asterisk_camera_omnidirectional/camera_info/insta360_back.yaml
    </rosparam>
  </node>
  
  <node name="$(arg camera_name)_front_to_back" pkg="tf" type="static_transform_publisher"
        args="0.0 0.0 0.0 0.0 3.141592 0.0 $(arg camera_name)/front $(arg camera_name)/back 100" output="screen" />
  <node name="$(arg camera_name)_front_to_flipped" pkg="tf" type="static_transform_publisher"
        args="0 0 0 1.570796 -1.570796 0 $(arg camera_name)/front $(arg camera_name)/flipped_front 100" output="screen" />
  <node name="$(arg pov_camera_name)_to_flipped" pkg="tf" type="static_transform_publisher"
        args="0 0 0 -1.570796 0 -1.570796 flipped_$(arg pov_camera_name) $(arg pov_camera_name) 100" output="screen" />
  
  <node name="$(arg pov_camera_name)_tf" pkg="tf" type="static_transform_publisher"
        args="0 0 0 $(arg pan) $(arg tilt) $(arg roll) $(arg camera_name)/flipped_front flipped_$(arg pov_camera_name) 100" output="screen" />
  
  <node name="sphere_surface_publisher" pkg="image_reprojection_plugins" type="static_sphere_publisher" output="screen">
    <remap from="sphere" to="sphere_surface" />
    <rosparam subst_value="true">
      frame_id: $(arg pov_camera_name)
      center: [0., 0., 0.]
      radius: 1.
    </rosparam>
  </node>
  
  <node name="$(arg pov_camera_name)_driver" pkg="nodelet" type="nodelet" 
        args="standalone image_reprojection/ImageReprojection" output="screen">
    <remap from="src_image0" to="$(arg camera_name)/front/image" />
    <rosparam ns="src_camera0">
      model: image_reprojection_plugins/FisheyeCameraModel
      fov: 3.141592
      image_transport: raw
      <!--       fov: 3.141592 -->
      <!-- image_transport: compressed -->
    </rosparam>
    
    <remap from="src_image1" to="$(arg camera_name)/back/image" />
    <rosparam ns="src_camera1">
      model: image_reprojection_plugins/FisheyeCameraModel
      fov: 3.141592
      image_transport: raw
      <!-- image_transport: compressed -->
    </rosparam>
    
    <remap from="surface" to="sphere_surface" />
    <rosparam ns="surface">
      model: image_reprojection_plugins/SphereSurfaceModel
    </rosparam>
    
    <remap from="dst_image" to="$(arg pov_camera_name)/image" />
    <rosparam ns="dst_camera" subst_value="true">
      frame_id: $(arg pov_camera_name)
      model: image_reprojection_plugins/PinholeCameraModel
      info_file: $(find asterisk_camera_omnidirectional)/camera_info/pinhole_camera.yaml
    </rosparam>
    
    <rosparam ns="map_update">
      background: true
      frequency: 30
      binning_x: 16
      binning_y: 16
    </rosparam>
  </node>
  
  <node name="pov_camera_viewer" pkg="rqt_image_view" type="rqt_image_view" />
  
  <!-- <node pkg="tf" type="tf_remap" name="tf_remapper" output="screen">
    <rosparam param="mappings" subst_value="true">
      [{old: pinhole_camera, new: $(arg pov_camera_name)_frame},{old: flipped_pinhole_camera, new: flipped_$(arg pov_camera_name)_frame}]
    </rosparam>
  </node> -->
  
  <!-- <node name="virtual_camera_visualizer" pkg="rviz" type="rviz"
        args="-d $(find asterisk_camera_omnidirectional)/config/camera_pov_insta360_debug.rviz" output="screen">
  </node> -->
  
</launch>
